" ==============================================================================
" Maintainer:      Splinter1984 <https://github.com/Splinter1984>
" Last Change:     Apr 7, 2025
" ==============================================================================

if !has('vim9script') ||  v:version < 900
  " Needs Vim version 9.0 and above
  finish
endif

vim9script

#g:mapleader = "\<Space>"
#g:maplocalleader = "\<Space>" # meant for certain file types
#map <BS> <Leader>
#g:mapleader = ','
g:maplocalleader = '\\'

# To make undercurl work in iterm2 (:h E436, :h t_Cs)
&t_Cs = "\e[4:3m"
&t_Ce = "\e[4:0m"

# 6=beam, 4=underline, 2=block
# &t_SI = "\e[6 q" #SI = INSERT mode
# &t_SR = "\e[4 q" #SR = REPLACE mode
# &t_EI = "\e[2 q" #EI = NORMAL mode (ALL ELSE)
#&t_Cs = "\e[4:3m" #undercurl
# Reset the cursor on start. After suspend-resume, cursor changes to beam even
# in normal mode. This will prevent that.
autocmd VimEnter,VimResume * silent execute '!echo -ne "\e[2 q"' | redraw!

# Format usin 'gq'. :h fo-table
set formatoptions=qjln
# autocmd FileType * setl formatoptions=qjlron

# Defaults
source $VIMRUNTIME/defaults.vim
# disable message from 'defaults.vim' when entering cmdwin
autocmd! vimHints

# Turn on listchars for Noname/scratch files and non-help files
# 'listchars' is not local to buffer, only local to window
#autocmd FileType * if &ft =~ '\v(help|markdown)' | setlocal listchars=eol:\ ,tab:\ \ ,trail:\  | else | setlocal listchars=eol:\ ,tab:\ \ ,trail:· | endif
#autocmd BufEnter * if &ft == null_string | setlocal listchars=eol:\ ,tab:\ \ ,trail:\  | endif
# autocmd BufEnter,FileType * :echom &ft expand('<amatch>') expand('<afile>') 'here'
set list
set listchars=eol:\ ,tab:\󰁕·,trail:· #,leadmultispace:\┊\ \ \ 
set fillchars=vert:│,fold:۰,diff:·,stl:─,stlnc:═,eob:\ 

set noshowcmd  # XXX: Stop echoing keymapped typed keys in the bottom row
set clipboard=unnamedplus # Always use the system clipboard
set mouse= # XXX: Disable mouse (set by defaults.vim). Needed by macos terminal app.
set number # line numbering
# set relativenumber
set hls # highlight search
set lbr # line break
set hidden # buffer becomes hidden (not unloaded) when it is abandoned (ex. help buffer)
set nojoinspaces # suppress inserting two spaces between sentences
set shortmess+=I # disable startup message
set report=0 # suppress reporting number of lines changed
set showmatch # show matching braces when cursor is over them
set ignorecase # case-insensitive search
set smartcase # smart search
set infercase # when doing <c-n/p> completion, respect case
set splitbelow # open new split panes to right
set splitright # open new split panes to bottom
set breakindent # wrapped line will continue visually indented
set smarttab
set spellsuggest=best,10 # set maximum number of suggestions listed top 10 items:
set foldmethod=indent
set foldnestmax=1
set nofoldenable # do not do folding when you open file
set signcolumn=yes # always show column for lsp diagnostics etc
set complete-=i # disable completing keywords from included files (e.g., #include in C)
set dictionary+=/usr/share/dict/words
set whichwrap+=<,>,h,l # make arrows and h, l, push cursor to next line
# set pumheight=7 # max number of items in popup menu (pmenu)
set virtualedit=block # allows selection of rectangular text in visual block mode
set wildignore+=.gitignore,*.swp,*.zwc,tags
set path=.,,
set laststatus=2 # always show statusline
# set laststatus=0
# set rulerformat=%80(%=%f\ %h%m%r\ %-6y\ %-5.(%l,%c%V%)\ %P%)
set cursorline
set textwidth=79
# {{{
# enable colorcolumn for all filetype, but quickfix and help
  set colorcolumn=81
  au FileType qf,help setlocal colorcolumn=
# }}}
set cc=+1
set nowrap
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
set re=1
#set updatetime=1000 # reducing updatetime
set dir=~/tmp
set t_Co=256
set cmdheight=2
set lazyredraw

# {{{
#   set termguicolors
#   set background=dark
#   colorscheme gruvbox8
# }}}

# colorscheme hybrid #tangoX, sonoma, seoul256, hybrid_reverse/material, happy_hacking, dzo, clearance
# colorsbox-stbright/stnight, deep-space, deus, herald, minimalist, seti, solorized, thegoodluck, tuttycolori,
# visualstudio, wildcharm

# XXX: job_start does not pass --exclude={foo, bar} correctly to shell (because
# job_start does not spawn a shell, it executes command directly). single quotes
# also don't work, need double quotes. but all of these work for :grep
# set grepprg=grep\ --color=never\ -RESIHin\ --exclude="*.git*"\ --exclude="*.swp"\ --exclude="*.zwc"\ --exclude-dir=plugged
# dot directories like .git are automatically excluded
# '$*' is a placeholder to replace typed pattern
#set grepprg=grep\ --color=never\ -REIHin\ $*
#set grepprg=rg\ $*
# make grep behave like vimgrep
# set grepprg=internal
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --follow
  set grepformat=%f:%l:%c:%m,%f:%l:%m
else
  set grepprg=grep\ --color=never\ -REIHin\ $*
endif

# enable folding at headers in markdown
g:markdown_folding = 1
g:markdown_fenced_languages = ['vim', 'diff', 'gitcommit', 'c', 'python', 'bash=sh']

syntax on # turn on syntax highlighting

# This loads the "matchit" plugin; It makes the % command more powerful, but
# bracket matching gets much slower. Vim's default bracket matching does not
# avoid commented brackets through. and this plugin avoids that.
if has('syntax') && has('eval')
    packadd! matchit
endif

# Suppress netrw banner
# g:netrw_banner = 0

# Disable this when not debugging Vim (:h :Termdebug)
packadd! termdebug
if v:version >= 901 && !getcompletion('comment', 'packadd')->empty()
    packadd comment
endif

# FIXME: unable to specify `gitgutter` variables in `opts.vim`.
# GitGutter opts: {{{
  g:gitgutter_set_sign_backgrounds = 1
  g:gitgutter_sign_added = '┃'
  g:gitgutter_sign_modified = '┃'
  g:gitgutter_sign_removed = '┃'
  g:gitgutter_sign_removed_first_line = '‾'
  #g:gitgutter_sign_removed_above_and_below = '▊'
  g:gitgutter_sign_modified_removed = '~'
  g:gitgutter_use_location_list = 1
  g:gitgutter_preview_win_floating = 1
  g:gitgutter_sign_priority = 1

  if executable("rg")
    g:gitgutter_grep = 'rg'
  endif
# }}}

# habamax-rst opts: {{{
  # g:rst_syntax_code_list = {
  #   'vim': ['vim'], 'sh': ['sh'],
  #   'python': ['python'], 'c': ['c'],
  #   'cpp': ['cpp'], 'xml': ['xml'],
  #   'yaml': ['yaml']
  # }
# }}}

# -----------------------------------------------------------------------------
# Plugins
# -----------------------------------------------------------------------------

# Download plug.vim if it doesn't exist yet
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

# Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) > 0
            \| PlugInstall --sync | source $MYVIMRC
            \| endif
plug#begin("~/.local/share/vim-plug/")

  Plug 'yegappan/lsp'
  Plug 'girishji/vimcomplete'
  Plug 'girishji/vimsuggest'
  Plug 'girishji/ngram-complete.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'itspriddle/vim-shellcheck'
  Plug 'machakann/vim-sandwich'
  # Plug 'tpope/vim-surround'
  # Plug 'ludovicchabant/vim-gutentags'
  # Plug 'skywind3000/gutentags_plus'
  Plug 'rhysd/conflict-marker.vim'
  # Plug 'habamax/vim-rst'
  Plug 'google/vim-maktaba'
  Plug 'google/vim-coverage'
  Plug 'google/vim-glaive'
  Plug 'some00/vimgcov'
  # Plug 'powerman/vim-plugin-AnsiEsc'
  # Plug 'LaTeX-Box-Team/LaTeX-Box'
  # Plug 'junkblocker/patchreview-vim'
  # Plug 'vimwiki/vimwiki'

plug#end()

# --------------------------
# Cmdline auto-completion
# --------------------------
# set wim=noselect:lastused,full wop=pum,tagfile wcm=<C-@> wmnu
# autocmd CmdlineChanged : timer_start(0, function(CmdComplete, [getcmdline()]))
# def CmdComplete(cur_cmdline: string, timer: number)
#     var [cmdline, curpos] = [getcmdline(), getcmdpos()]
#     if cur_cmdline ==# cmdline # Avoid completing each char of keymaps and pasted text
#       && !pumvisible() && curpos == cmdline->len() + 1
#       && cmdline =~ '\%(\w\|[*/:.-]\)$' && cmdline !~ '^\d\+$'  # Reduce noise
#         feedkeys("\<C-@>", "ti")
#         set eventignore+=CmdlineChanged  # Suppress redundant completion attempts
#         timer_start(0, (_) => {
#             # using 'g' in substitute() fixes problem where ^@ gets inserted
#             # when typing really fast
#             getcmdline()->substitute('\%x00', '', 'g')->setcmdline()  # Vim inserts <C-@> when no completion items exist
#             set eventignore-=CmdlineChanged
#         })
#     endif
# enddef
# autocmd CmdlineEnter : set bo+=error
# autocmd CmdlineLeave : set bo-=error
# cnoremap <Up> <End><C-U><Up>
# cnoremap <Down> <End><C-U><Down>

# nnoremap <leader><bs> :b <c-@>

# ---------------------------
# Insert Mode Auto-completion
# ---------------------------
# set cot=menuone,noselect,popup inf
# autocmd TextChangedI * InsComplete()
# autocmd TextChangedP * InsComplete(true)
# var skip_next_complete = false
# var prevline: string
# def InsComplete(pumvisible = false)
#     var curline = getline('.')
#     if prevline !=# curline
#         prevline = curline
#         if !pumvisible
#             if !skip_next_complete && curline->strpart(0, col('.') - 1) =~ '\S\{2}$'
#                 feedkeys("\<c-n>", "ni")
#             endif
#         elseif complete_info(['selected']).selected == -1
#             feedkeys("\<c-e>\<c-n>", "ni")
#         endif
#     endif
#     skip_next_complete = false
# enddef
# def SkipNextComplete(): string
#     skip_next_complete = true
#     return "\<c-e>"
# enddef
# inoremap <silent> <c-e> <c-r>=<SID>SkipNextComplete()<cr>
# inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
# inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

#packadd taghighlight
